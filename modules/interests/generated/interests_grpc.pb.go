// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: interests.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InterestsService_GetAllInterests_FullMethodName = "/ai_poi.interests.v1.InterestsService/GetAllInterests"
	InterestsService_CreateInterest_FullMethodName  = "/ai_poi.interests.v1.InterestsService/CreateInterest"
	InterestsService_UpdateInterest_FullMethodName  = "/ai_poi.interests.v1.InterestsService/UpdateInterest"
	InterestsService_RemoveInterest_FullMethodName  = "/ai_poi.interests.v1.InterestsService/RemoveInterest"
)

// InterestsServiceClient is the client API for InterestsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// InterestsService provides interest management for users
type InterestsServiceClient interface {
	// Get all available interests
	GetAllInterests(ctx context.Context, in *GetAllInterestsRequest, opts ...grpc.CallOption) (*GetAllInterestsResponse, error)
	// Create a new interest
	CreateInterest(ctx context.Context, in *CreateInterestRequest, opts ...grpc.CallOption) (*CreateInterestResponse, error)
	// Update an existing interest
	UpdateInterest(ctx context.Context, in *UpdateInterestRequest, opts ...grpc.CallOption) (*UpdateInterestResponse, error)
	// Delete/remove an interest
	RemoveInterest(ctx context.Context, in *RemoveInterestRequest, opts ...grpc.CallOption) (*RemoveInterestResponse, error)
}

type interestsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInterestsServiceClient(cc grpc.ClientConnInterface) InterestsServiceClient {
	return &interestsServiceClient{cc}
}

func (c *interestsServiceClient) GetAllInterests(ctx context.Context, in *GetAllInterestsRequest, opts ...grpc.CallOption) (*GetAllInterestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllInterestsResponse)
	err := c.cc.Invoke(ctx, InterestsService_GetAllInterests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interestsServiceClient) CreateInterest(ctx context.Context, in *CreateInterestRequest, opts ...grpc.CallOption) (*CreateInterestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInterestResponse)
	err := c.cc.Invoke(ctx, InterestsService_CreateInterest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interestsServiceClient) UpdateInterest(ctx context.Context, in *UpdateInterestRequest, opts ...grpc.CallOption) (*UpdateInterestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateInterestResponse)
	err := c.cc.Invoke(ctx, InterestsService_UpdateInterest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interestsServiceClient) RemoveInterest(ctx context.Context, in *RemoveInterestRequest, opts ...grpc.CallOption) (*RemoveInterestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveInterestResponse)
	err := c.cc.Invoke(ctx, InterestsService_RemoveInterest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterestsServiceServer is the server API for InterestsService service.
// All implementations must embed UnimplementedInterestsServiceServer
// for forward compatibility.
//
// InterestsService provides interest management for users
type InterestsServiceServer interface {
	// Get all available interests
	GetAllInterests(context.Context, *GetAllInterestsRequest) (*GetAllInterestsResponse, error)
	// Create a new interest
	CreateInterest(context.Context, *CreateInterestRequest) (*CreateInterestResponse, error)
	// Update an existing interest
	UpdateInterest(context.Context, *UpdateInterestRequest) (*UpdateInterestResponse, error)
	// Delete/remove an interest
	RemoveInterest(context.Context, *RemoveInterestRequest) (*RemoveInterestResponse, error)
	mustEmbedUnimplementedInterestsServiceServer()
}

// UnimplementedInterestsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInterestsServiceServer struct{}

func (UnimplementedInterestsServiceServer) GetAllInterests(context.Context, *GetAllInterestsRequest) (*GetAllInterestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllInterests not implemented")
}
func (UnimplementedInterestsServiceServer) CreateInterest(context.Context, *CreateInterestRequest) (*CreateInterestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInterest not implemented")
}
func (UnimplementedInterestsServiceServer) UpdateInterest(context.Context, *UpdateInterestRequest) (*UpdateInterestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInterest not implemented")
}
func (UnimplementedInterestsServiceServer) RemoveInterest(context.Context, *RemoveInterestRequest) (*RemoveInterestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveInterest not implemented")
}
func (UnimplementedInterestsServiceServer) mustEmbedUnimplementedInterestsServiceServer() {}
func (UnimplementedInterestsServiceServer) testEmbeddedByValue()                          {}

// UnsafeInterestsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterestsServiceServer will
// result in compilation errors.
type UnsafeInterestsServiceServer interface {
	mustEmbedUnimplementedInterestsServiceServer()
}

func RegisterInterestsServiceServer(s grpc.ServiceRegistrar, srv InterestsServiceServer) {
	// If the following call pancis, it indicates UnimplementedInterestsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InterestsService_ServiceDesc, srv)
}

func _InterestsService_GetAllInterests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllInterestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterestsServiceServer).GetAllInterests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterestsService_GetAllInterests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterestsServiceServer).GetAllInterests(ctx, req.(*GetAllInterestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterestsService_CreateInterest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInterestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterestsServiceServer).CreateInterest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterestsService_CreateInterest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterestsServiceServer).CreateInterest(ctx, req.(*CreateInterestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterestsService_UpdateInterest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInterestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterestsServiceServer).UpdateInterest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterestsService_UpdateInterest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterestsServiceServer).UpdateInterest(ctx, req.(*UpdateInterestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterestsService_RemoveInterest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveInterestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterestsServiceServer).RemoveInterest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterestsService_RemoveInterest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterestsServiceServer).RemoveInterest(ctx, req.(*RemoveInterestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InterestsService_ServiceDesc is the grpc.ServiceDesc for InterestsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InterestsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai_poi.interests.v1.InterestsService",
	HandlerType: (*InterestsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllInterests",
			Handler:    _InterestsService_GetAllInterests_Handler,
		},
		{
			MethodName: "CreateInterest",
			Handler:    _InterestsService_CreateInterest_Handler,
		},
		{
			MethodName: "UpdateInterest",
			Handler:    _InterestsService_UpdateInterest_Handler,
		},
		{
			MethodName: "RemoveInterest",
			Handler:    _InterestsService_RemoveInterest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interests.proto",
}
