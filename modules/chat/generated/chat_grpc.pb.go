// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: chat.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChatService_StartChatStream_FullMethodName     = "/ai_poi.chat.v1.ChatService/StartChatStream"
	ChatService_ContinueChatStream_FullMethodName  = "/ai_poi.chat.v1.ChatService/ContinueChatStream"
	ChatService_FreeChatStream_FullMethodName      = "/ai_poi.chat.v1.ChatService/FreeChatStream"
	ChatService_GetChatSessions_FullMethodName     = "/ai_poi.chat.v1.ChatService/GetChatSessions"
	ChatService_SaveItinerary_FullMethodName       = "/ai_poi.chat.v1.ChatService/SaveItinerary"
	ChatService_GetSavedItineraries_FullMethodName = "/ai_poi.chat.v1.ChatService/GetSavedItineraries"
	ChatService_RemoveItinerary_FullMethodName     = "/ai_poi.chat.v1.ChatService/RemoveItinerary"
	ChatService_GetPOIDetails_FullMethodName       = "/ai_poi.chat.v1.ChatService/GetPOIDetails"
)

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ChatService provides AI-powered chat functionality with streaming support
type ChatServiceClient interface {
	// Start a new chat session with streaming responses
	StartChatStream(ctx context.Context, in *StartChatRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatEvent], error)
	// Continue an existing chat session with streaming responses
	ContinueChatStream(ctx context.Context, in *ContinueChatRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatEvent], error)
	// Free chat without authentication (streaming)
	FreeChatStream(ctx context.Context, in *FreeChatRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatEvent], error)
	// Get user's chat sessions (non-streaming)
	GetChatSessions(ctx context.Context, in *GetChatSessionsRequest, opts ...grpc.CallOption) (*GetChatSessionsResponse, error)
	// Save itinerary from chat
	SaveItinerary(ctx context.Context, in *SaveItineraryRequest, opts ...grpc.CallOption) (*SaveItineraryResponse, error)
	// Get saved itineraries
	GetSavedItineraries(ctx context.Context, in *GetSavedItinerariesRequest, opts ...grpc.CallOption) (*GetSavedItinerariesResponse, error)
	// Remove saved itinerary
	RemoveItinerary(ctx context.Context, in *RemoveItineraryRequest, opts ...grpc.CallOption) (*RemoveItineraryResponse, error)
	// Get POI details for chat context
	GetPOIDetails(ctx context.Context, in *GetPOIDetailsRequest, opts ...grpc.CallOption) (*GetPOIDetailsResponse, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) StartChatStream(ctx context.Context, in *StartChatRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[0], ChatService_StartChatStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StartChatRequest, ChatEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_StartChatStreamClient = grpc.ServerStreamingClient[ChatEvent]

func (c *chatServiceClient) ContinueChatStream(ctx context.Context, in *ContinueChatRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[1], ChatService_ContinueChatStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ContinueChatRequest, ChatEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_ContinueChatStreamClient = grpc.ServerStreamingClient[ChatEvent]

func (c *chatServiceClient) FreeChatStream(ctx context.Context, in *FreeChatRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[2], ChatService_FreeChatStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FreeChatRequest, ChatEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_FreeChatStreamClient = grpc.ServerStreamingClient[ChatEvent]

func (c *chatServiceClient) GetChatSessions(ctx context.Context, in *GetChatSessionsRequest, opts ...grpc.CallOption) (*GetChatSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChatSessionsResponse)
	err := c.cc.Invoke(ctx, ChatService_GetChatSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) SaveItinerary(ctx context.Context, in *SaveItineraryRequest, opts ...grpc.CallOption) (*SaveItineraryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveItineraryResponse)
	err := c.cc.Invoke(ctx, ChatService_SaveItinerary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetSavedItineraries(ctx context.Context, in *GetSavedItinerariesRequest, opts ...grpc.CallOption) (*GetSavedItinerariesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSavedItinerariesResponse)
	err := c.cc.Invoke(ctx, ChatService_GetSavedItineraries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) RemoveItinerary(ctx context.Context, in *RemoveItineraryRequest, opts ...grpc.CallOption) (*RemoveItineraryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveItineraryResponse)
	err := c.cc.Invoke(ctx, ChatService_RemoveItinerary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetPOIDetails(ctx context.Context, in *GetPOIDetailsRequest, opts ...grpc.CallOption) (*GetPOIDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPOIDetailsResponse)
	err := c.cc.Invoke(ctx, ChatService_GetPOIDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility.
//
// ChatService provides AI-powered chat functionality with streaming support
type ChatServiceServer interface {
	// Start a new chat session with streaming responses
	StartChatStream(*StartChatRequest, grpc.ServerStreamingServer[ChatEvent]) error
	// Continue an existing chat session with streaming responses
	ContinueChatStream(*ContinueChatRequest, grpc.ServerStreamingServer[ChatEvent]) error
	// Free chat without authentication (streaming)
	FreeChatStream(*FreeChatRequest, grpc.ServerStreamingServer[ChatEvent]) error
	// Get user's chat sessions (non-streaming)
	GetChatSessions(context.Context, *GetChatSessionsRequest) (*GetChatSessionsResponse, error)
	// Save itinerary from chat
	SaveItinerary(context.Context, *SaveItineraryRequest) (*SaveItineraryResponse, error)
	// Get saved itineraries
	GetSavedItineraries(context.Context, *GetSavedItinerariesRequest) (*GetSavedItinerariesResponse, error)
	// Remove saved itinerary
	RemoveItinerary(context.Context, *RemoveItineraryRequest) (*RemoveItineraryResponse, error)
	// Get POI details for chat context
	GetPOIDetails(context.Context, *GetPOIDetailsRequest) (*GetPOIDetailsResponse, error)
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChatServiceServer struct{}

func (UnimplementedChatServiceServer) StartChatStream(*StartChatRequest, grpc.ServerStreamingServer[ChatEvent]) error {
	return status.Errorf(codes.Unimplemented, "method StartChatStream not implemented")
}
func (UnimplementedChatServiceServer) ContinueChatStream(*ContinueChatRequest, grpc.ServerStreamingServer[ChatEvent]) error {
	return status.Errorf(codes.Unimplemented, "method ContinueChatStream not implemented")
}
func (UnimplementedChatServiceServer) FreeChatStream(*FreeChatRequest, grpc.ServerStreamingServer[ChatEvent]) error {
	return status.Errorf(codes.Unimplemented, "method FreeChatStream not implemented")
}
func (UnimplementedChatServiceServer) GetChatSessions(context.Context, *GetChatSessionsRequest) (*GetChatSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatSessions not implemented")
}
func (UnimplementedChatServiceServer) SaveItinerary(context.Context, *SaveItineraryRequest) (*SaveItineraryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveItinerary not implemented")
}
func (UnimplementedChatServiceServer) GetSavedItineraries(context.Context, *GetSavedItinerariesRequest) (*GetSavedItinerariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSavedItineraries not implemented")
}
func (UnimplementedChatServiceServer) RemoveItinerary(context.Context, *RemoveItineraryRequest) (*RemoveItineraryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveItinerary not implemented")
}
func (UnimplementedChatServiceServer) GetPOIDetails(context.Context, *GetPOIDetailsRequest) (*GetPOIDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPOIDetails not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}
func (UnimplementedChatServiceServer) testEmbeddedByValue()                     {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	// If the following call pancis, it indicates UnimplementedChatServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_StartChatStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).StartChatStream(m, &grpc.GenericServerStream[StartChatRequest, ChatEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_StartChatStreamServer = grpc.ServerStreamingServer[ChatEvent]

func _ChatService_ContinueChatStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ContinueChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).ContinueChatStream(m, &grpc.GenericServerStream[ContinueChatRequest, ChatEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_ContinueChatStreamServer = grpc.ServerStreamingServer[ChatEvent]

func _ChatService_FreeChatStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FreeChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).FreeChatStream(m, &grpc.GenericServerStream[FreeChatRequest, ChatEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatService_FreeChatStreamServer = grpc.ServerStreamingServer[ChatEvent]

func _ChatService_GetChatSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetChatSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetChatSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetChatSessions(ctx, req.(*GetChatSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_SaveItinerary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveItineraryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SaveItinerary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_SaveItinerary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SaveItinerary(ctx, req.(*SaveItineraryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetSavedItineraries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSavedItinerariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetSavedItineraries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetSavedItineraries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetSavedItineraries(ctx, req.(*GetSavedItinerariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_RemoveItinerary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveItineraryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).RemoveItinerary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_RemoveItinerary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).RemoveItinerary(ctx, req.(*RemoveItineraryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetPOIDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPOIDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetPOIDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetPOIDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetPOIDetails(ctx, req.(*GetPOIDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai_poi.chat.v1.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChatSessions",
			Handler:    _ChatService_GetChatSessions_Handler,
		},
		{
			MethodName: "SaveItinerary",
			Handler:    _ChatService_SaveItinerary_Handler,
		},
		{
			MethodName: "GetSavedItineraries",
			Handler:    _ChatService_GetSavedItineraries_Handler,
		},
		{
			MethodName: "RemoveItinerary",
			Handler:    _ChatService_RemoveItinerary_Handler,
		},
		{
			MethodName: "GetPOIDetails",
			Handler:    _ChatService_GetPOIDetails_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartChatStream",
			Handler:       _ChatService_StartChatStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ContinueChatStream",
			Handler:       _ChatService_ContinueChatStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FreeChatStream",
			Handler:       _ChatService_FreeChatStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chat.proto",
}
