// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: recents.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RecentsService_GetRecentInteractions_FullMethodName = "/ai_poi.recents.v1.RecentsService/GetRecentInteractions"
	RecentsService_GetCityInteractions_FullMethodName   = "/ai_poi.recents.v1.RecentsService/GetCityInteractions"
	RecentsService_RecordInteraction_FullMethodName     = "/ai_poi.recents.v1.RecentsService/RecordInteraction"
	RecentsService_GetInteractionHistory_FullMethodName = "/ai_poi.recents.v1.RecentsService/GetInteractionHistory"
	RecentsService_GetFrequentPlaces_FullMethodName     = "/ai_poi.recents.v1.RecentsService/GetFrequentPlaces"
)

// RecentsServiceClient is the client API for RecentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RecentsService provides recent user interactions and activity tracking
type RecentsServiceClient interface {
	// Get user's recent interactions
	GetRecentInteractions(ctx context.Context, in *GetRecentInteractionsRequest, opts ...grpc.CallOption) (*GetRecentInteractionsResponse, error)
	// Get recent interactions for a specific city
	GetCityInteractions(ctx context.Context, in *GetCityInteractionsRequest, opts ...grpc.CallOption) (*GetCityInteractionsResponse, error)
	// Record a new user interaction (internal)
	RecordInteraction(ctx context.Context, in *RecordInteractionRequest, opts ...grpc.CallOption) (*RecordInteractionResponse, error)
	// Get user's interaction history with filters
	GetInteractionHistory(ctx context.Context, in *GetInteractionHistoryRequest, opts ...grpc.CallOption) (*GetInteractionHistoryResponse, error)
	// Get frequently visited places
	GetFrequentPlaces(ctx context.Context, in *GetFrequentPlacesRequest, opts ...grpc.CallOption) (*GetFrequentPlacesResponse, error)
}

type recentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecentsServiceClient(cc grpc.ClientConnInterface) RecentsServiceClient {
	return &recentsServiceClient{cc}
}

func (c *recentsServiceClient) GetRecentInteractions(ctx context.Context, in *GetRecentInteractionsRequest, opts ...grpc.CallOption) (*GetRecentInteractionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecentInteractionsResponse)
	err := c.cc.Invoke(ctx, RecentsService_GetRecentInteractions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recentsServiceClient) GetCityInteractions(ctx context.Context, in *GetCityInteractionsRequest, opts ...grpc.CallOption) (*GetCityInteractionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCityInteractionsResponse)
	err := c.cc.Invoke(ctx, RecentsService_GetCityInteractions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recentsServiceClient) RecordInteraction(ctx context.Context, in *RecordInteractionRequest, opts ...grpc.CallOption) (*RecordInteractionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecordInteractionResponse)
	err := c.cc.Invoke(ctx, RecentsService_RecordInteraction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recentsServiceClient) GetInteractionHistory(ctx context.Context, in *GetInteractionHistoryRequest, opts ...grpc.CallOption) (*GetInteractionHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInteractionHistoryResponse)
	err := c.cc.Invoke(ctx, RecentsService_GetInteractionHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recentsServiceClient) GetFrequentPlaces(ctx context.Context, in *GetFrequentPlacesRequest, opts ...grpc.CallOption) (*GetFrequentPlacesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFrequentPlacesResponse)
	err := c.cc.Invoke(ctx, RecentsService_GetFrequentPlaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecentsServiceServer is the server API for RecentsService service.
// All implementations must embed UnimplementedRecentsServiceServer
// for forward compatibility.
//
// RecentsService provides recent user interactions and activity tracking
type RecentsServiceServer interface {
	// Get user's recent interactions
	GetRecentInteractions(context.Context, *GetRecentInteractionsRequest) (*GetRecentInteractionsResponse, error)
	// Get recent interactions for a specific city
	GetCityInteractions(context.Context, *GetCityInteractionsRequest) (*GetCityInteractionsResponse, error)
	// Record a new user interaction (internal)
	RecordInteraction(context.Context, *RecordInteractionRequest) (*RecordInteractionResponse, error)
	// Get user's interaction history with filters
	GetInteractionHistory(context.Context, *GetInteractionHistoryRequest) (*GetInteractionHistoryResponse, error)
	// Get frequently visited places
	GetFrequentPlaces(context.Context, *GetFrequentPlacesRequest) (*GetFrequentPlacesResponse, error)
	mustEmbedUnimplementedRecentsServiceServer()
}

// UnimplementedRecentsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRecentsServiceServer struct{}

func (UnimplementedRecentsServiceServer) GetRecentInteractions(context.Context, *GetRecentInteractionsRequest) (*GetRecentInteractionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecentInteractions not implemented")
}
func (UnimplementedRecentsServiceServer) GetCityInteractions(context.Context, *GetCityInteractionsRequest) (*GetCityInteractionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCityInteractions not implemented")
}
func (UnimplementedRecentsServiceServer) RecordInteraction(context.Context, *RecordInteractionRequest) (*RecordInteractionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordInteraction not implemented")
}
func (UnimplementedRecentsServiceServer) GetInteractionHistory(context.Context, *GetInteractionHistoryRequest) (*GetInteractionHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInteractionHistory not implemented")
}
func (UnimplementedRecentsServiceServer) GetFrequentPlaces(context.Context, *GetFrequentPlacesRequest) (*GetFrequentPlacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFrequentPlaces not implemented")
}
func (UnimplementedRecentsServiceServer) mustEmbedUnimplementedRecentsServiceServer() {}
func (UnimplementedRecentsServiceServer) testEmbeddedByValue()                        {}

// UnsafeRecentsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecentsServiceServer will
// result in compilation errors.
type UnsafeRecentsServiceServer interface {
	mustEmbedUnimplementedRecentsServiceServer()
}

func RegisterRecentsServiceServer(s grpc.ServiceRegistrar, srv RecentsServiceServer) {
	// If the following call pancis, it indicates UnimplementedRecentsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RecentsService_ServiceDesc, srv)
}

func _RecentsService_GetRecentInteractions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecentInteractionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecentsServiceServer).GetRecentInteractions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecentsService_GetRecentInteractions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecentsServiceServer).GetRecentInteractions(ctx, req.(*GetRecentInteractionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecentsService_GetCityInteractions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCityInteractionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecentsServiceServer).GetCityInteractions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecentsService_GetCityInteractions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecentsServiceServer).GetCityInteractions(ctx, req.(*GetCityInteractionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecentsService_RecordInteraction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordInteractionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecentsServiceServer).RecordInteraction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecentsService_RecordInteraction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecentsServiceServer).RecordInteraction(ctx, req.(*RecordInteractionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecentsService_GetInteractionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInteractionHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecentsServiceServer).GetInteractionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecentsService_GetInteractionHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecentsServiceServer).GetInteractionHistory(ctx, req.(*GetInteractionHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecentsService_GetFrequentPlaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFrequentPlacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecentsServiceServer).GetFrequentPlaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecentsService_GetFrequentPlaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecentsServiceServer).GetFrequentPlaces(ctx, req.(*GetFrequentPlacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecentsService_ServiceDesc is the grpc.ServiceDesc for RecentsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecentsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai_poi.recents.v1.RecentsService",
	HandlerType: (*RecentsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecentInteractions",
			Handler:    _RecentsService_GetRecentInteractions_Handler,
		},
		{
			MethodName: "GetCityInteractions",
			Handler:    _RecentsService_GetCityInteractions_Handler,
		},
		{
			MethodName: "RecordInteraction",
			Handler:    _RecentsService_RecordInteraction_Handler,
		},
		{
			MethodName: "GetInteractionHistory",
			Handler:    _RecentsService_GetInteractionHistory_Handler,
		},
		{
			MethodName: "GetFrequentPlaces",
			Handler:    _RecentsService_GetFrequentPlaces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recents.proto",
}
