// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: user.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_GetUserProfile_FullMethodName      = "/ai_poi.user.v1.UserService/GetUserProfile"
	UserService_UpdateUserProfile_FullMethodName   = "/ai_poi.user.v1.UserService/UpdateUserProfile"
	UserService_GetSearchProfiles_FullMethodName   = "/ai_poi.user.v1.UserService/GetSearchProfiles"
	UserService_GetSearchProfile_FullMethodName    = "/ai_poi.user.v1.UserService/GetSearchProfile"
	UserService_CreateSearchProfile_FullMethodName = "/ai_poi.user.v1.UserService/CreateSearchProfile"
	UserService_UpdateSearchProfile_FullMethodName = "/ai_poi.user.v1.UserService/UpdateSearchProfile"
	UserService_DeleteSearchProfile_FullMethodName = "/ai_poi.user.v1.UserService/DeleteSearchProfile"
	UserService_GetDefaultProfile_FullMethodName   = "/ai_poi.user.v1.UserService/GetDefaultProfile"
	UserService_SetDefaultProfile_FullMethodName   = "/ai_poi.user.v1.UserService/SetDefaultProfile"
	UserService_GetInterests_FullMethodName        = "/ai_poi.user.v1.UserService/GetInterests"
	UserService_CreateInterest_FullMethodName      = "/ai_poi.user.v1.UserService/CreateInterest"
	UserService_UpdateInterest_FullMethodName      = "/ai_poi.user.v1.UserService/UpdateInterest"
	UserService_DeleteInterest_FullMethodName      = "/ai_poi.user.v1.UserService/DeleteInterest"
	UserService_GetTags_FullMethodName             = "/ai_poi.user.v1.UserService/GetTags"
	UserService_GetTag_FullMethodName              = "/ai_poi.user.v1.UserService/GetTag"
	UserService_CreateTag_FullMethodName           = "/ai_poi.user.v1.UserService/CreateTag"
	UserService_UpdateTag_FullMethodName           = "/ai_poi.user.v1.UserService/UpdateTag"
	UserService_DeleteTag_FullMethodName           = "/ai_poi.user.v1.UserService/DeleteTag"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// UserService provides user profile and preference management
type UserServiceClient interface {
	// Get user profile
	GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error)
	// Update user profile
	UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error)
	// Search profile management
	GetSearchProfiles(ctx context.Context, in *GetSearchProfilesRequest, opts ...grpc.CallOption) (*GetSearchProfilesResponse, error)
	GetSearchProfile(ctx context.Context, in *GetSearchProfileRequest, opts ...grpc.CallOption) (*GetSearchProfileResponse, error)
	CreateSearchProfile(ctx context.Context, in *CreateSearchProfileRequest, opts ...grpc.CallOption) (*CreateSearchProfileResponse, error)
	UpdateSearchProfile(ctx context.Context, in *UpdateSearchProfileRequest, opts ...grpc.CallOption) (*UpdateSearchProfileResponse, error)
	DeleteSearchProfile(ctx context.Context, in *DeleteSearchProfileRequest, opts ...grpc.CallOption) (*DeleteSearchProfileResponse, error)
	GetDefaultProfile(ctx context.Context, in *GetDefaultProfileRequest, opts ...grpc.CallOption) (*GetDefaultProfileResponse, error)
	SetDefaultProfile(ctx context.Context, in *SetDefaultProfileRequest, opts ...grpc.CallOption) (*SetDefaultProfileResponse, error)
	// Interests management
	GetInterests(ctx context.Context, in *GetInterestsRequest, opts ...grpc.CallOption) (*GetInterestsResponse, error)
	CreateInterest(ctx context.Context, in *CreateInterestRequest, opts ...grpc.CallOption) (*CreateInterestResponse, error)
	UpdateInterest(ctx context.Context, in *UpdateInterestRequest, opts ...grpc.CallOption) (*UpdateInterestResponse, error)
	DeleteInterest(ctx context.Context, in *DeleteInterestRequest, opts ...grpc.CallOption) (*DeleteInterestResponse, error)
	// Tags management
	GetTags(ctx context.Context, in *GetTagsRequest, opts ...grpc.CallOption) (*GetTagsResponse, error)
	GetTag(ctx context.Context, in *GetTagRequest, opts ...grpc.CallOption) (*GetTagResponse, error)
	CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagResponse, error)
	UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*UpdateTagResponse, error)
	DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*DeleteTagResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserProfileResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserProfileResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetSearchProfiles(ctx context.Context, in *GetSearchProfilesRequest, opts ...grpc.CallOption) (*GetSearchProfilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSearchProfilesResponse)
	err := c.cc.Invoke(ctx, UserService_GetSearchProfiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetSearchProfile(ctx context.Context, in *GetSearchProfileRequest, opts ...grpc.CallOption) (*GetSearchProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSearchProfileResponse)
	err := c.cc.Invoke(ctx, UserService_GetSearchProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateSearchProfile(ctx context.Context, in *CreateSearchProfileRequest, opts ...grpc.CallOption) (*CreateSearchProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSearchProfileResponse)
	err := c.cc.Invoke(ctx, UserService_CreateSearchProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateSearchProfile(ctx context.Context, in *UpdateSearchProfileRequest, opts ...grpc.CallOption) (*UpdateSearchProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSearchProfileResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateSearchProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteSearchProfile(ctx context.Context, in *DeleteSearchProfileRequest, opts ...grpc.CallOption) (*DeleteSearchProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSearchProfileResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteSearchProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetDefaultProfile(ctx context.Context, in *GetDefaultProfileRequest, opts ...grpc.CallOption) (*GetDefaultProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDefaultProfileResponse)
	err := c.cc.Invoke(ctx, UserService_GetDefaultProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SetDefaultProfile(ctx context.Context, in *SetDefaultProfileRequest, opts ...grpc.CallOption) (*SetDefaultProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDefaultProfileResponse)
	err := c.cc.Invoke(ctx, UserService_SetDefaultProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetInterests(ctx context.Context, in *GetInterestsRequest, opts ...grpc.CallOption) (*GetInterestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInterestsResponse)
	err := c.cc.Invoke(ctx, UserService_GetInterests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateInterest(ctx context.Context, in *CreateInterestRequest, opts ...grpc.CallOption) (*CreateInterestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInterestResponse)
	err := c.cc.Invoke(ctx, UserService_CreateInterest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateInterest(ctx context.Context, in *UpdateInterestRequest, opts ...grpc.CallOption) (*UpdateInterestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateInterestResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateInterest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteInterest(ctx context.Context, in *DeleteInterestRequest, opts ...grpc.CallOption) (*DeleteInterestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteInterestResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteInterest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetTags(ctx context.Context, in *GetTagsRequest, opts ...grpc.CallOption) (*GetTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTagsResponse)
	err := c.cc.Invoke(ctx, UserService_GetTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetTag(ctx context.Context, in *GetTagRequest, opts ...grpc.CallOption) (*GetTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTagResponse)
	err := c.cc.Invoke(ctx, UserService_GetTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTagResponse)
	err := c.cc.Invoke(ctx, UserService_CreateTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*UpdateTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTagResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*DeleteTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTagResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
//
// UserService provides user profile and preference management
type UserServiceServer interface {
	// Get user profile
	GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error)
	// Update user profile
	UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error)
	// Search profile management
	GetSearchProfiles(context.Context, *GetSearchProfilesRequest) (*GetSearchProfilesResponse, error)
	GetSearchProfile(context.Context, *GetSearchProfileRequest) (*GetSearchProfileResponse, error)
	CreateSearchProfile(context.Context, *CreateSearchProfileRequest) (*CreateSearchProfileResponse, error)
	UpdateSearchProfile(context.Context, *UpdateSearchProfileRequest) (*UpdateSearchProfileResponse, error)
	DeleteSearchProfile(context.Context, *DeleteSearchProfileRequest) (*DeleteSearchProfileResponse, error)
	GetDefaultProfile(context.Context, *GetDefaultProfileRequest) (*GetDefaultProfileResponse, error)
	SetDefaultProfile(context.Context, *SetDefaultProfileRequest) (*SetDefaultProfileResponse, error)
	// Interests management
	GetInterests(context.Context, *GetInterestsRequest) (*GetInterestsResponse, error)
	CreateInterest(context.Context, *CreateInterestRequest) (*CreateInterestResponse, error)
	UpdateInterest(context.Context, *UpdateInterestRequest) (*UpdateInterestResponse, error)
	DeleteInterest(context.Context, *DeleteInterestRequest) (*DeleteInterestResponse, error)
	// Tags management
	GetTags(context.Context, *GetTagsRequest) (*GetTagsResponse, error)
	GetTag(context.Context, *GetTagRequest) (*GetTagResponse, error)
	CreateTag(context.Context, *CreateTagRequest) (*CreateTagResponse, error)
	UpdateTag(context.Context, *UpdateTagRequest) (*UpdateTagResponse, error)
	DeleteTag(context.Context, *DeleteTagRequest) (*DeleteTagResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (UnimplementedUserServiceServer) GetSearchProfiles(context.Context, *GetSearchProfilesRequest) (*GetSearchProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSearchProfiles not implemented")
}
func (UnimplementedUserServiceServer) GetSearchProfile(context.Context, *GetSearchProfileRequest) (*GetSearchProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSearchProfile not implemented")
}
func (UnimplementedUserServiceServer) CreateSearchProfile(context.Context, *CreateSearchProfileRequest) (*CreateSearchProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSearchProfile not implemented")
}
func (UnimplementedUserServiceServer) UpdateSearchProfile(context.Context, *UpdateSearchProfileRequest) (*UpdateSearchProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSearchProfile not implemented")
}
func (UnimplementedUserServiceServer) DeleteSearchProfile(context.Context, *DeleteSearchProfileRequest) (*DeleteSearchProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSearchProfile not implemented")
}
func (UnimplementedUserServiceServer) GetDefaultProfile(context.Context, *GetDefaultProfileRequest) (*GetDefaultProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultProfile not implemented")
}
func (UnimplementedUserServiceServer) SetDefaultProfile(context.Context, *SetDefaultProfileRequest) (*SetDefaultProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultProfile not implemented")
}
func (UnimplementedUserServiceServer) GetInterests(context.Context, *GetInterestsRequest) (*GetInterestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterests not implemented")
}
func (UnimplementedUserServiceServer) CreateInterest(context.Context, *CreateInterestRequest) (*CreateInterestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInterest not implemented")
}
func (UnimplementedUserServiceServer) UpdateInterest(context.Context, *UpdateInterestRequest) (*UpdateInterestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInterest not implemented")
}
func (UnimplementedUserServiceServer) DeleteInterest(context.Context, *DeleteInterestRequest) (*DeleteInterestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInterest not implemented")
}
func (UnimplementedUserServiceServer) GetTags(context.Context, *GetTagsRequest) (*GetTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTags not implemented")
}
func (UnimplementedUserServiceServer) GetTag(context.Context, *GetTagRequest) (*GetTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTag not implemented")
}
func (UnimplementedUserServiceServer) CreateTag(context.Context, *CreateTagRequest) (*CreateTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (UnimplementedUserServiceServer) UpdateTag(context.Context, *UpdateTagRequest) (*UpdateTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTag not implemented")
}
func (UnimplementedUserServiceServer) DeleteTag(context.Context, *DeleteTagRequest) (*DeleteTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserProfile(ctx, req.(*GetUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserProfile(ctx, req.(*UpdateUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetSearchProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSearchProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetSearchProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetSearchProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetSearchProfiles(ctx, req.(*GetSearchProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetSearchProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSearchProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetSearchProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetSearchProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetSearchProfile(ctx, req.(*GetSearchProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateSearchProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSearchProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateSearchProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateSearchProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateSearchProfile(ctx, req.(*CreateSearchProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateSearchProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSearchProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateSearchProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateSearchProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateSearchProfile(ctx, req.(*UpdateSearchProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteSearchProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSearchProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteSearchProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteSearchProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteSearchProfile(ctx, req.(*DeleteSearchProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetDefaultProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetDefaultProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetDefaultProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetDefaultProfile(ctx, req.(*GetDefaultProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SetDefaultProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SetDefaultProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SetDefaultProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SetDefaultProfile(ctx, req.(*SetDefaultProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetInterests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInterestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetInterests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetInterests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetInterests(ctx, req.(*GetInterestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateInterest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInterestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateInterest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateInterest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateInterest(ctx, req.(*CreateInterestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateInterest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInterestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateInterest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateInterest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateInterest(ctx, req.(*UpdateInterestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteInterest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInterestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteInterest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteInterest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteInterest(ctx, req.(*DeleteInterestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetTags(ctx, req.(*GetTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetTag(ctx, req.(*GetTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateTag(ctx, req.(*CreateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateTag(ctx, req.(*UpdateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteTag(ctx, req.(*DeleteTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai_poi.user.v1.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserProfile",
			Handler:    _UserService_GetUserProfile_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _UserService_UpdateUserProfile_Handler,
		},
		{
			MethodName: "GetSearchProfiles",
			Handler:    _UserService_GetSearchProfiles_Handler,
		},
		{
			MethodName: "GetSearchProfile",
			Handler:    _UserService_GetSearchProfile_Handler,
		},
		{
			MethodName: "CreateSearchProfile",
			Handler:    _UserService_CreateSearchProfile_Handler,
		},
		{
			MethodName: "UpdateSearchProfile",
			Handler:    _UserService_UpdateSearchProfile_Handler,
		},
		{
			MethodName: "DeleteSearchProfile",
			Handler:    _UserService_DeleteSearchProfile_Handler,
		},
		{
			MethodName: "GetDefaultProfile",
			Handler:    _UserService_GetDefaultProfile_Handler,
		},
		{
			MethodName: "SetDefaultProfile",
			Handler:    _UserService_SetDefaultProfile_Handler,
		},
		{
			MethodName: "GetInterests",
			Handler:    _UserService_GetInterests_Handler,
		},
		{
			MethodName: "CreateInterest",
			Handler:    _UserService_CreateInterest_Handler,
		},
		{
			MethodName: "UpdateInterest",
			Handler:    _UserService_UpdateInterest_Handler,
		},
		{
			MethodName: "DeleteInterest",
			Handler:    _UserService_DeleteInterest_Handler,
		},
		{
			MethodName: "GetTags",
			Handler:    _UserService_GetTags_Handler,
		},
		{
			MethodName: "GetTag",
			Handler:    _UserService_GetTag_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _UserService_CreateTag_Handler,
		},
		{
			MethodName: "UpdateTag",
			Handler:    _UserService_UpdateTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _UserService_DeleteTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
