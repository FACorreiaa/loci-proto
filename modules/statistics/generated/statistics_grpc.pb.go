// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: statistics.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StatisticsService_GetMainPageStatistics_FullMethodName    = "/ai_poi.statistics.v1.StatisticsService/GetMainPageStatistics"
	StatisticsService_StreamMainPageStatistics_FullMethodName = "/ai_poi.statistics.v1.StatisticsService/StreamMainPageStatistics"
	StatisticsService_GetDetailedPOIStatistics_FullMethodName = "/ai_poi.statistics.v1.StatisticsService/GetDetailedPOIStatistics"
	StatisticsService_GetLandingPageStatistics_FullMethodName = "/ai_poi.statistics.v1.StatisticsService/GetLandingPageStatistics"
	StatisticsService_GetUserActivityAnalytics_FullMethodName = "/ai_poi.statistics.v1.StatisticsService/GetUserActivityAnalytics"
	StatisticsService_GetSystemAnalytics_FullMethodName       = "/ai_poi.statistics.v1.StatisticsService/GetSystemAnalytics"
)

// StatisticsServiceClient is the client API for StatisticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// StatisticsService provides analytics and statistics functionality
type StatisticsServiceClient interface {
	// Get main page statistics (public)
	GetMainPageStatistics(ctx context.Context, in *GetMainPageStatisticsRequest, opts ...grpc.CallOption) (*GetMainPageStatisticsResponse, error)
	// Stream real-time statistics updates (public)
	StreamMainPageStatistics(ctx context.Context, in *StreamMainPageStatisticsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StatisticsEvent], error)
	// Get detailed POI statistics (authenticated)
	GetDetailedPOIStatistics(ctx context.Context, in *GetDetailedPOIStatisticsRequest, opts ...grpc.CallOption) (*GetDetailedPOIStatisticsResponse, error)
	// Get user landing page statistics (authenticated)
	GetLandingPageStatistics(ctx context.Context, in *GetLandingPageStatisticsRequest, opts ...grpc.CallOption) (*GetLandingPageStatisticsResponse, error)
	// Get user activity analytics (authenticated)
	GetUserActivityAnalytics(ctx context.Context, in *GetUserActivityAnalyticsRequest, opts ...grpc.CallOption) (*GetUserActivityAnalyticsResponse, error)
	// Get system-wide analytics (admin)
	GetSystemAnalytics(ctx context.Context, in *GetSystemAnalyticsRequest, opts ...grpc.CallOption) (*GetSystemAnalyticsResponse, error)
}

type statisticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatisticsServiceClient(cc grpc.ClientConnInterface) StatisticsServiceClient {
	return &statisticsServiceClient{cc}
}

func (c *statisticsServiceClient) GetMainPageStatistics(ctx context.Context, in *GetMainPageStatisticsRequest, opts ...grpc.CallOption) (*GetMainPageStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMainPageStatisticsResponse)
	err := c.cc.Invoke(ctx, StatisticsService_GetMainPageStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) StreamMainPageStatistics(ctx context.Context, in *StreamMainPageStatisticsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StatisticsEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StatisticsService_ServiceDesc.Streams[0], StatisticsService_StreamMainPageStatistics_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamMainPageStatisticsRequest, StatisticsEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StatisticsService_StreamMainPageStatisticsClient = grpc.ServerStreamingClient[StatisticsEvent]

func (c *statisticsServiceClient) GetDetailedPOIStatistics(ctx context.Context, in *GetDetailedPOIStatisticsRequest, opts ...grpc.CallOption) (*GetDetailedPOIStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDetailedPOIStatisticsResponse)
	err := c.cc.Invoke(ctx, StatisticsService_GetDetailedPOIStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) GetLandingPageStatistics(ctx context.Context, in *GetLandingPageStatisticsRequest, opts ...grpc.CallOption) (*GetLandingPageStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLandingPageStatisticsResponse)
	err := c.cc.Invoke(ctx, StatisticsService_GetLandingPageStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) GetUserActivityAnalytics(ctx context.Context, in *GetUserActivityAnalyticsRequest, opts ...grpc.CallOption) (*GetUserActivityAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserActivityAnalyticsResponse)
	err := c.cc.Invoke(ctx, StatisticsService_GetUserActivityAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) GetSystemAnalytics(ctx context.Context, in *GetSystemAnalyticsRequest, opts ...grpc.CallOption) (*GetSystemAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSystemAnalyticsResponse)
	err := c.cc.Invoke(ctx, StatisticsService_GetSystemAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatisticsServiceServer is the server API for StatisticsService service.
// All implementations must embed UnimplementedStatisticsServiceServer
// for forward compatibility.
//
// StatisticsService provides analytics and statistics functionality
type StatisticsServiceServer interface {
	// Get main page statistics (public)
	GetMainPageStatistics(context.Context, *GetMainPageStatisticsRequest) (*GetMainPageStatisticsResponse, error)
	// Stream real-time statistics updates (public)
	StreamMainPageStatistics(*StreamMainPageStatisticsRequest, grpc.ServerStreamingServer[StatisticsEvent]) error
	// Get detailed POI statistics (authenticated)
	GetDetailedPOIStatistics(context.Context, *GetDetailedPOIStatisticsRequest) (*GetDetailedPOIStatisticsResponse, error)
	// Get user landing page statistics (authenticated)
	GetLandingPageStatistics(context.Context, *GetLandingPageStatisticsRequest) (*GetLandingPageStatisticsResponse, error)
	// Get user activity analytics (authenticated)
	GetUserActivityAnalytics(context.Context, *GetUserActivityAnalyticsRequest) (*GetUserActivityAnalyticsResponse, error)
	// Get system-wide analytics (admin)
	GetSystemAnalytics(context.Context, *GetSystemAnalyticsRequest) (*GetSystemAnalyticsResponse, error)
	mustEmbedUnimplementedStatisticsServiceServer()
}

// UnimplementedStatisticsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStatisticsServiceServer struct{}

func (UnimplementedStatisticsServiceServer) GetMainPageStatistics(context.Context, *GetMainPageStatisticsRequest) (*GetMainPageStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMainPageStatistics not implemented")
}
func (UnimplementedStatisticsServiceServer) StreamMainPageStatistics(*StreamMainPageStatisticsRequest, grpc.ServerStreamingServer[StatisticsEvent]) error {
	return status.Errorf(codes.Unimplemented, "method StreamMainPageStatistics not implemented")
}
func (UnimplementedStatisticsServiceServer) GetDetailedPOIStatistics(context.Context, *GetDetailedPOIStatisticsRequest) (*GetDetailedPOIStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailedPOIStatistics not implemented")
}
func (UnimplementedStatisticsServiceServer) GetLandingPageStatistics(context.Context, *GetLandingPageStatisticsRequest) (*GetLandingPageStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLandingPageStatistics not implemented")
}
func (UnimplementedStatisticsServiceServer) GetUserActivityAnalytics(context.Context, *GetUserActivityAnalyticsRequest) (*GetUserActivityAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserActivityAnalytics not implemented")
}
func (UnimplementedStatisticsServiceServer) GetSystemAnalytics(context.Context, *GetSystemAnalyticsRequest) (*GetSystemAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemAnalytics not implemented")
}
func (UnimplementedStatisticsServiceServer) mustEmbedUnimplementedStatisticsServiceServer() {}
func (UnimplementedStatisticsServiceServer) testEmbeddedByValue()                           {}

// UnsafeStatisticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatisticsServiceServer will
// result in compilation errors.
type UnsafeStatisticsServiceServer interface {
	mustEmbedUnimplementedStatisticsServiceServer()
}

func RegisterStatisticsServiceServer(s grpc.ServiceRegistrar, srv StatisticsServiceServer) {
	// If the following call pancis, it indicates UnimplementedStatisticsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StatisticsService_ServiceDesc, srv)
}

func _StatisticsService_GetMainPageStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMainPageStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).GetMainPageStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatisticsService_GetMainPageStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).GetMainPageStatistics(ctx, req.(*GetMainPageStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_StreamMainPageStatistics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamMainPageStatisticsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatisticsServiceServer).StreamMainPageStatistics(m, &grpc.GenericServerStream[StreamMainPageStatisticsRequest, StatisticsEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StatisticsService_StreamMainPageStatisticsServer = grpc.ServerStreamingServer[StatisticsEvent]

func _StatisticsService_GetDetailedPOIStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailedPOIStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).GetDetailedPOIStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatisticsService_GetDetailedPOIStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).GetDetailedPOIStatistics(ctx, req.(*GetDetailedPOIStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_GetLandingPageStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLandingPageStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).GetLandingPageStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatisticsService_GetLandingPageStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).GetLandingPageStatistics(ctx, req.(*GetLandingPageStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_GetUserActivityAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserActivityAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).GetUserActivityAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatisticsService_GetUserActivityAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).GetUserActivityAnalytics(ctx, req.(*GetUserActivityAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_GetSystemAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).GetSystemAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatisticsService_GetSystemAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).GetSystemAnalytics(ctx, req.(*GetSystemAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StatisticsService_ServiceDesc is the grpc.ServiceDesc for StatisticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatisticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai_poi.statistics.v1.StatisticsService",
	HandlerType: (*StatisticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMainPageStatistics",
			Handler:    _StatisticsService_GetMainPageStatistics_Handler,
		},
		{
			MethodName: "GetDetailedPOIStatistics",
			Handler:    _StatisticsService_GetDetailedPOIStatistics_Handler,
		},
		{
			MethodName: "GetLandingPageStatistics",
			Handler:    _StatisticsService_GetLandingPageStatistics_Handler,
		},
		{
			MethodName: "GetUserActivityAnalytics",
			Handler:    _StatisticsService_GetUserActivityAnalytics_Handler,
		},
		{
			MethodName: "GetSystemAnalytics",
			Handler:    _StatisticsService_GetSystemAnalytics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMainPageStatistics",
			Handler:       _StatisticsService_StreamMainPageStatistics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "statistics.proto",
}
