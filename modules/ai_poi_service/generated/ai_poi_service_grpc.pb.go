// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: ai_poi_service.proto

package v1

import (
	context "context"
	v1 "github.com/FACorreiaa/loci-proto/proto/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AiPoiService_HealthCheck_FullMethodName     = "/ai_poi.v1.AiPoiService/HealthCheck"
	AiPoiService_GetServiceInfo_FullMethodName  = "/ai_poi.v1.AiPoiService/GetServiceInfo"
	AiPoiService_GetFeatureFlags_FullMethodName = "/ai_poi.v1.AiPoiService/GetFeatureFlags"
)

// AiPoiServiceClient is the client API for AiPoiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Main AI POI API Gateway Service
// This service can act as a unified entry point to all sub-services
type AiPoiServiceClient interface {
	// Health check
	HealthCheck(ctx context.Context, in *v1.HealthCheckRequest, opts ...grpc.CallOption) (*v1.HealthCheckResponse, error)
	// Get service information
	GetServiceInfo(ctx context.Context, in *GetServiceInfoRequest, opts ...grpc.CallOption) (*GetServiceInfoResponse, error)
	// Get feature flags for the user
	GetFeatureFlags(ctx context.Context, in *GetFeatureFlagsRequest, opts ...grpc.CallOption) (*GetFeatureFlagsResponse, error)
}

type aiPoiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAiPoiServiceClient(cc grpc.ClientConnInterface) AiPoiServiceClient {
	return &aiPoiServiceClient{cc}
}

func (c *aiPoiServiceClient) HealthCheck(ctx context.Context, in *v1.HealthCheckRequest, opts ...grpc.CallOption) (*v1.HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.HealthCheckResponse)
	err := c.cc.Invoke(ctx, AiPoiService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aiPoiServiceClient) GetServiceInfo(ctx context.Context, in *GetServiceInfoRequest, opts ...grpc.CallOption) (*GetServiceInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServiceInfoResponse)
	err := c.cc.Invoke(ctx, AiPoiService_GetServiceInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aiPoiServiceClient) GetFeatureFlags(ctx context.Context, in *GetFeatureFlagsRequest, opts ...grpc.CallOption) (*GetFeatureFlagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFeatureFlagsResponse)
	err := c.cc.Invoke(ctx, AiPoiService_GetFeatureFlags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AiPoiServiceServer is the server API for AiPoiService service.
// All implementations must embed UnimplementedAiPoiServiceServer
// for forward compatibility.
//
// Main AI POI API Gateway Service
// This service can act as a unified entry point to all sub-services
type AiPoiServiceServer interface {
	// Health check
	HealthCheck(context.Context, *v1.HealthCheckRequest) (*v1.HealthCheckResponse, error)
	// Get service information
	GetServiceInfo(context.Context, *GetServiceInfoRequest) (*GetServiceInfoResponse, error)
	// Get feature flags for the user
	GetFeatureFlags(context.Context, *GetFeatureFlagsRequest) (*GetFeatureFlagsResponse, error)
	mustEmbedUnimplementedAiPoiServiceServer()
}

// UnimplementedAiPoiServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAiPoiServiceServer struct{}

func (UnimplementedAiPoiServiceServer) HealthCheck(context.Context, *v1.HealthCheckRequest) (*v1.HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedAiPoiServiceServer) GetServiceInfo(context.Context, *GetServiceInfoRequest) (*GetServiceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceInfo not implemented")
}
func (UnimplementedAiPoiServiceServer) GetFeatureFlags(context.Context, *GetFeatureFlagsRequest) (*GetFeatureFlagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatureFlags not implemented")
}
func (UnimplementedAiPoiServiceServer) mustEmbedUnimplementedAiPoiServiceServer() {}
func (UnimplementedAiPoiServiceServer) testEmbeddedByValue()                      {}

// UnsafeAiPoiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AiPoiServiceServer will
// result in compilation errors.
type UnsafeAiPoiServiceServer interface {
	mustEmbedUnimplementedAiPoiServiceServer()
}

func RegisterAiPoiServiceServer(s grpc.ServiceRegistrar, srv AiPoiServiceServer) {
	// If the following call pancis, it indicates UnimplementedAiPoiServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AiPoiService_ServiceDesc, srv)
}

func _AiPoiService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiPoiServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AiPoiService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiPoiServiceServer).HealthCheck(ctx, req.(*v1.HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AiPoiService_GetServiceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiPoiServiceServer).GetServiceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AiPoiService_GetServiceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiPoiServiceServer).GetServiceInfo(ctx, req.(*GetServiceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AiPoiService_GetFeatureFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeatureFlagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiPoiServiceServer).GetFeatureFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AiPoiService_GetFeatureFlags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiPoiServiceServer).GetFeatureFlags(ctx, req.(*GetFeatureFlagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AiPoiService_ServiceDesc is the grpc.ServiceDesc for AiPoiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AiPoiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai_poi.v1.AiPoiService",
	HandlerType: (*AiPoiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _AiPoiService_HealthCheck_Handler,
		},
		{
			MethodName: "GetServiceInfo",
			Handler:    _AiPoiService_GetServiceInfo_Handler,
		},
		{
			MethodName: "GetFeatureFlags",
			Handler:    _AiPoiService_GetFeatureFlags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ai_poi_service.proto",
}
