// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: list.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ListService_CreateList_FullMethodName         = "/ai_poi.list.v1.ListService/CreateList"
	ListService_GetLists_FullMethodName           = "/ai_poi.list.v1.ListService/GetLists"
	ListService_GetList_FullMethodName            = "/ai_poi.list.v1.ListService/GetList"
	ListService_UpdateList_FullMethodName         = "/ai_poi.list.v1.ListService/UpdateList"
	ListService_DeleteList_FullMethodName         = "/ai_poi.list.v1.ListService/DeleteList"
	ListService_CreateItinerary_FullMethodName    = "/ai_poi.list.v1.ListService/CreateItinerary"
	ListService_AddListItem_FullMethodName        = "/ai_poi.list.v1.ListService/AddListItem"
	ListService_UpdateListItem_FullMethodName     = "/ai_poi.list.v1.ListService/UpdateListItem"
	ListService_RemoveListItem_FullMethodName     = "/ai_poi.list.v1.ListService/RemoveListItem"
	ListService_GetListItems_FullMethodName       = "/ai_poi.list.v1.ListService/GetListItems"
	ListService_GetListRestaurants_FullMethodName = "/ai_poi.list.v1.ListService/GetListRestaurants"
	ListService_GetListHotels_FullMethodName      = "/ai_poi.list.v1.ListService/GetListHotels"
	ListService_GetListItineraries_FullMethodName = "/ai_poi.list.v1.ListService/GetListItineraries"
	ListService_SavePublicList_FullMethodName     = "/ai_poi.list.v1.ListService/SavePublicList"
	ListService_UnsaveList_FullMethodName         = "/ai_poi.list.v1.ListService/UnsaveList"
	ListService_GetSavedLists_FullMethodName      = "/ai_poi.list.v1.ListService/GetSavedLists"
	ListService_SearchPublicLists_FullMethodName  = "/ai_poi.list.v1.ListService/SearchPublicLists"
)

// ListServiceClient is the client API for ListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ListService provides list and itinerary management functionality
type ListServiceClient interface {
	// List management
	CreateList(ctx context.Context, in *CreateListRequest, opts ...grpc.CallOption) (*CreateListResponse, error)
	GetLists(ctx context.Context, in *GetListsRequest, opts ...grpc.CallOption) (*GetListsResponse, error)
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	UpdateList(ctx context.Context, in *UpdateListRequest, opts ...grpc.CallOption) (*UpdateListResponse, error)
	DeleteList(ctx context.Context, in *DeleteListRequest, opts ...grpc.CallOption) (*DeleteListResponse, error)
	// Itinerary management (lists that are itineraries)
	CreateItinerary(ctx context.Context, in *CreateItineraryRequest, opts ...grpc.CallOption) (*CreateItineraryResponse, error)
	// List item management
	AddListItem(ctx context.Context, in *AddListItemRequest, opts ...grpc.CallOption) (*AddListItemResponse, error)
	UpdateListItem(ctx context.Context, in *UpdateListItemRequest, opts ...grpc.CallOption) (*UpdateListItemResponse, error)
	RemoveListItem(ctx context.Context, in *RemoveListItemRequest, opts ...grpc.CallOption) (*RemoveListItemResponse, error)
	GetListItems(ctx context.Context, in *GetListItemsRequest, opts ...grpc.CallOption) (*GetListItemsResponse, error)
	// Get items by content type
	GetListRestaurants(ctx context.Context, in *GetListRestaurantsRequest, opts ...grpc.CallOption) (*GetListRestaurantsResponse, error)
	GetListHotels(ctx context.Context, in *GetListHotelsRequest, opts ...grpc.CallOption) (*GetListHotelsResponse, error)
	GetListItineraries(ctx context.Context, in *GetListItinerariesRequest, opts ...grpc.CallOption) (*GetListItinerariesResponse, error)
	// Public list management
	SavePublicList(ctx context.Context, in *SavePublicListRequest, opts ...grpc.CallOption) (*SavePublicListResponse, error)
	UnsaveList(ctx context.Context, in *UnsaveListRequest, opts ...grpc.CallOption) (*UnsaveListResponse, error)
	GetSavedLists(ctx context.Context, in *GetSavedListsRequest, opts ...grpc.CallOption) (*GetSavedListsResponse, error)
	SearchPublicLists(ctx context.Context, in *SearchPublicListsRequest, opts ...grpc.CallOption) (*SearchPublicListsResponse, error)
}

type listServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewListServiceClient(cc grpc.ClientConnInterface) ListServiceClient {
	return &listServiceClient{cc}
}

func (c *listServiceClient) CreateList(ctx context.Context, in *CreateListRequest, opts ...grpc.CallOption) (*CreateListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateListResponse)
	err := c.cc.Invoke(ctx, ListService_CreateList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) GetLists(ctx context.Context, in *GetListsRequest, opts ...grpc.CallOption) (*GetListsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetListsResponse)
	err := c.cc.Invoke(ctx, ListService_GetLists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, ListService_GetList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) UpdateList(ctx context.Context, in *UpdateListRequest, opts ...grpc.CallOption) (*UpdateListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateListResponse)
	err := c.cc.Invoke(ctx, ListService_UpdateList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) DeleteList(ctx context.Context, in *DeleteListRequest, opts ...grpc.CallOption) (*DeleteListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteListResponse)
	err := c.cc.Invoke(ctx, ListService_DeleteList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) CreateItinerary(ctx context.Context, in *CreateItineraryRequest, opts ...grpc.CallOption) (*CreateItineraryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateItineraryResponse)
	err := c.cc.Invoke(ctx, ListService_CreateItinerary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) AddListItem(ctx context.Context, in *AddListItemRequest, opts ...grpc.CallOption) (*AddListItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddListItemResponse)
	err := c.cc.Invoke(ctx, ListService_AddListItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) UpdateListItem(ctx context.Context, in *UpdateListItemRequest, opts ...grpc.CallOption) (*UpdateListItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateListItemResponse)
	err := c.cc.Invoke(ctx, ListService_UpdateListItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) RemoveListItem(ctx context.Context, in *RemoveListItemRequest, opts ...grpc.CallOption) (*RemoveListItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveListItemResponse)
	err := c.cc.Invoke(ctx, ListService_RemoveListItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) GetListItems(ctx context.Context, in *GetListItemsRequest, opts ...grpc.CallOption) (*GetListItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetListItemsResponse)
	err := c.cc.Invoke(ctx, ListService_GetListItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) GetListRestaurants(ctx context.Context, in *GetListRestaurantsRequest, opts ...grpc.CallOption) (*GetListRestaurantsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetListRestaurantsResponse)
	err := c.cc.Invoke(ctx, ListService_GetListRestaurants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) GetListHotels(ctx context.Context, in *GetListHotelsRequest, opts ...grpc.CallOption) (*GetListHotelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetListHotelsResponse)
	err := c.cc.Invoke(ctx, ListService_GetListHotels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) GetListItineraries(ctx context.Context, in *GetListItinerariesRequest, opts ...grpc.CallOption) (*GetListItinerariesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetListItinerariesResponse)
	err := c.cc.Invoke(ctx, ListService_GetListItineraries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) SavePublicList(ctx context.Context, in *SavePublicListRequest, opts ...grpc.CallOption) (*SavePublicListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SavePublicListResponse)
	err := c.cc.Invoke(ctx, ListService_SavePublicList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) UnsaveList(ctx context.Context, in *UnsaveListRequest, opts ...grpc.CallOption) (*UnsaveListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnsaveListResponse)
	err := c.cc.Invoke(ctx, ListService_UnsaveList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) GetSavedLists(ctx context.Context, in *GetSavedListsRequest, opts ...grpc.CallOption) (*GetSavedListsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSavedListsResponse)
	err := c.cc.Invoke(ctx, ListService_GetSavedLists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listServiceClient) SearchPublicLists(ctx context.Context, in *SearchPublicListsRequest, opts ...grpc.CallOption) (*SearchPublicListsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchPublicListsResponse)
	err := c.cc.Invoke(ctx, ListService_SearchPublicLists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListServiceServer is the server API for ListService service.
// All implementations must embed UnimplementedListServiceServer
// for forward compatibility.
//
// ListService provides list and itinerary management functionality
type ListServiceServer interface {
	// List management
	CreateList(context.Context, *CreateListRequest) (*CreateListResponse, error)
	GetLists(context.Context, *GetListsRequest) (*GetListsResponse, error)
	GetList(context.Context, *GetListRequest) (*GetListResponse, error)
	UpdateList(context.Context, *UpdateListRequest) (*UpdateListResponse, error)
	DeleteList(context.Context, *DeleteListRequest) (*DeleteListResponse, error)
	// Itinerary management (lists that are itineraries)
	CreateItinerary(context.Context, *CreateItineraryRequest) (*CreateItineraryResponse, error)
	// List item management
	AddListItem(context.Context, *AddListItemRequest) (*AddListItemResponse, error)
	UpdateListItem(context.Context, *UpdateListItemRequest) (*UpdateListItemResponse, error)
	RemoveListItem(context.Context, *RemoveListItemRequest) (*RemoveListItemResponse, error)
	GetListItems(context.Context, *GetListItemsRequest) (*GetListItemsResponse, error)
	// Get items by content type
	GetListRestaurants(context.Context, *GetListRestaurantsRequest) (*GetListRestaurantsResponse, error)
	GetListHotels(context.Context, *GetListHotelsRequest) (*GetListHotelsResponse, error)
	GetListItineraries(context.Context, *GetListItinerariesRequest) (*GetListItinerariesResponse, error)
	// Public list management
	SavePublicList(context.Context, *SavePublicListRequest) (*SavePublicListResponse, error)
	UnsaveList(context.Context, *UnsaveListRequest) (*UnsaveListResponse, error)
	GetSavedLists(context.Context, *GetSavedListsRequest) (*GetSavedListsResponse, error)
	SearchPublicLists(context.Context, *SearchPublicListsRequest) (*SearchPublicListsResponse, error)
	mustEmbedUnimplementedListServiceServer()
}

// UnimplementedListServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedListServiceServer struct{}

func (UnimplementedListServiceServer) CreateList(context.Context, *CreateListRequest) (*CreateListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateList not implemented")
}
func (UnimplementedListServiceServer) GetLists(context.Context, *GetListsRequest) (*GetListsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLists not implemented")
}
func (UnimplementedListServiceServer) GetList(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedListServiceServer) UpdateList(context.Context, *UpdateListRequest) (*UpdateListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateList not implemented")
}
func (UnimplementedListServiceServer) DeleteList(context.Context, *DeleteListRequest) (*DeleteListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteList not implemented")
}
func (UnimplementedListServiceServer) CreateItinerary(context.Context, *CreateItineraryRequest) (*CreateItineraryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItinerary not implemented")
}
func (UnimplementedListServiceServer) AddListItem(context.Context, *AddListItemRequest) (*AddListItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddListItem not implemented")
}
func (UnimplementedListServiceServer) UpdateListItem(context.Context, *UpdateListItemRequest) (*UpdateListItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateListItem not implemented")
}
func (UnimplementedListServiceServer) RemoveListItem(context.Context, *RemoveListItemRequest) (*RemoveListItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveListItem not implemented")
}
func (UnimplementedListServiceServer) GetListItems(context.Context, *GetListItemsRequest) (*GetListItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListItems not implemented")
}
func (UnimplementedListServiceServer) GetListRestaurants(context.Context, *GetListRestaurantsRequest) (*GetListRestaurantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListRestaurants not implemented")
}
func (UnimplementedListServiceServer) GetListHotels(context.Context, *GetListHotelsRequest) (*GetListHotelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListHotels not implemented")
}
func (UnimplementedListServiceServer) GetListItineraries(context.Context, *GetListItinerariesRequest) (*GetListItinerariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListItineraries not implemented")
}
func (UnimplementedListServiceServer) SavePublicList(context.Context, *SavePublicListRequest) (*SavePublicListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePublicList not implemented")
}
func (UnimplementedListServiceServer) UnsaveList(context.Context, *UnsaveListRequest) (*UnsaveListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsaveList not implemented")
}
func (UnimplementedListServiceServer) GetSavedLists(context.Context, *GetSavedListsRequest) (*GetSavedListsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSavedLists not implemented")
}
func (UnimplementedListServiceServer) SearchPublicLists(context.Context, *SearchPublicListsRequest) (*SearchPublicListsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPublicLists not implemented")
}
func (UnimplementedListServiceServer) mustEmbedUnimplementedListServiceServer() {}
func (UnimplementedListServiceServer) testEmbeddedByValue()                     {}

// UnsafeListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListServiceServer will
// result in compilation errors.
type UnsafeListServiceServer interface {
	mustEmbedUnimplementedListServiceServer()
}

func RegisterListServiceServer(s grpc.ServiceRegistrar, srv ListServiceServer) {
	// If the following call pancis, it indicates UnimplementedListServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ListService_ServiceDesc, srv)
}

func _ListService_CreateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).CreateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_CreateList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).CreateList(ctx, req.(*CreateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_GetLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).GetLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_GetLists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).GetLists(ctx, req.(*GetListsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_UpdateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).UpdateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_UpdateList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).UpdateList(ctx, req.(*UpdateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_DeleteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).DeleteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_DeleteList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).DeleteList(ctx, req.(*DeleteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_CreateItinerary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItineraryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).CreateItinerary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_CreateItinerary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).CreateItinerary(ctx, req.(*CreateItineraryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_AddListItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddListItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).AddListItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_AddListItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).AddListItem(ctx, req.(*AddListItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_UpdateListItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateListItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).UpdateListItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_UpdateListItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).UpdateListItem(ctx, req.(*UpdateListItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_RemoveListItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveListItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).RemoveListItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_RemoveListItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).RemoveListItem(ctx, req.(*RemoveListItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_GetListItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).GetListItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_GetListItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).GetListItems(ctx, req.(*GetListItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_GetListRestaurants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRestaurantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).GetListRestaurants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_GetListRestaurants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).GetListRestaurants(ctx, req.(*GetListRestaurantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_GetListHotels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListHotelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).GetListHotels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_GetListHotels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).GetListHotels(ctx, req.(*GetListHotelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_GetListItineraries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListItinerariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).GetListItineraries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_GetListItineraries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).GetListItineraries(ctx, req.(*GetListItinerariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_SavePublicList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavePublicListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).SavePublicList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_SavePublicList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).SavePublicList(ctx, req.(*SavePublicListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_UnsaveList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsaveListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).UnsaveList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_UnsaveList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).UnsaveList(ctx, req.(*UnsaveListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_GetSavedLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSavedListsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).GetSavedLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_GetSavedLists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).GetSavedLists(ctx, req.(*GetSavedListsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListService_SearchPublicLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPublicListsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListServiceServer).SearchPublicLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListService_SearchPublicLists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListServiceServer).SearchPublicLists(ctx, req.(*SearchPublicListsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ListService_ServiceDesc is the grpc.ServiceDesc for ListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai_poi.list.v1.ListService",
	HandlerType: (*ListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateList",
			Handler:    _ListService_CreateList_Handler,
		},
		{
			MethodName: "GetLists",
			Handler:    _ListService_GetLists_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _ListService_GetList_Handler,
		},
		{
			MethodName: "UpdateList",
			Handler:    _ListService_UpdateList_Handler,
		},
		{
			MethodName: "DeleteList",
			Handler:    _ListService_DeleteList_Handler,
		},
		{
			MethodName: "CreateItinerary",
			Handler:    _ListService_CreateItinerary_Handler,
		},
		{
			MethodName: "AddListItem",
			Handler:    _ListService_AddListItem_Handler,
		},
		{
			MethodName: "UpdateListItem",
			Handler:    _ListService_UpdateListItem_Handler,
		},
		{
			MethodName: "RemoveListItem",
			Handler:    _ListService_RemoveListItem_Handler,
		},
		{
			MethodName: "GetListItems",
			Handler:    _ListService_GetListItems_Handler,
		},
		{
			MethodName: "GetListRestaurants",
			Handler:    _ListService_GetListRestaurants_Handler,
		},
		{
			MethodName: "GetListHotels",
			Handler:    _ListService_GetListHotels_Handler,
		},
		{
			MethodName: "GetListItineraries",
			Handler:    _ListService_GetListItineraries_Handler,
		},
		{
			MethodName: "SavePublicList",
			Handler:    _ListService_SavePublicList_Handler,
		},
		{
			MethodName: "UnsaveList",
			Handler:    _ListService_UnsaveList_Handler,
		},
		{
			MethodName: "GetSavedLists",
			Handler:    _ListService_GetSavedLists_Handler,
		},
		{
			MethodName: "SearchPublicLists",
			Handler:    _ListService_SearchPublicLists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "list.proto",
}
