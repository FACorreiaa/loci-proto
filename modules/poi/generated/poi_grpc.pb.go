// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: poi.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	POIService_GetPOIsByCity_FullMethodName            = "/ai_poi.poi.v1.POIService/GetPOIsByCity"
	POIService_SearchPOIs_FullMethodName               = "/ai_poi.poi.v1.POIService/SearchPOIs"
	POIService_SearchPOIsSemantic_FullMethodName       = "/ai_poi.poi.v1.POIService/SearchPOIsSemantic"
	POIService_SearchPOIsSemanticByCity_FullMethodName = "/ai_poi.poi.v1.POIService/SearchPOIsSemanticByCity"
	POIService_SearchPOIsHybrid_FullMethodName         = "/ai_poi.poi.v1.POIService/SearchPOIsHybrid"
	POIService_GetNearbyRecommendations_FullMethodName = "/ai_poi.poi.v1.POIService/GetNearbyRecommendations"
	POIService_DiscoverRestaurants_FullMethodName      = "/ai_poi.poi.v1.POIService/DiscoverRestaurants"
	POIService_DiscoverActivities_FullMethodName       = "/ai_poi.poi.v1.POIService/DiscoverActivities"
	POIService_DiscoverHotels_FullMethodName           = "/ai_poi.poi.v1.POIService/DiscoverHotels"
	POIService_DiscoverAttractions_FullMethodName      = "/ai_poi.poi.v1.POIService/DiscoverAttractions"
	POIService_AddToFavorites_FullMethodName           = "/ai_poi.poi.v1.POIService/AddToFavorites"
	POIService_RemoveFromFavorites_FullMethodName      = "/ai_poi.poi.v1.POIService/RemoveFromFavorites"
	POIService_GetFavorites_FullMethodName             = "/ai_poi.poi.v1.POIService/GetFavorites"
	POIService_GetItineraries_FullMethodName           = "/ai_poi.poi.v1.POIService/GetItineraries"
	POIService_GetItinerary_FullMethodName             = "/ai_poi.poi.v1.POIService/GetItinerary"
	POIService_UpdateItinerary_FullMethodName          = "/ai_poi.poi.v1.POIService/UpdateItinerary"
	POIService_GenerateEmbeddings_FullMethodName       = "/ai_poi.poi.v1.POIService/GenerateEmbeddings"
)

// POIServiceClient is the client API for POIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// POIService provides points of interest discovery and management
type POIServiceClient interface {
	// Get POIs by city
	GetPOIsByCity(ctx context.Context, in *GetPOIsByCityRequest, opts ...grpc.CallOption) (*GetPOIsByCityResponse, error)
	SearchPOIs(ctx context.Context, in *SearchPOIsRequest, opts ...grpc.CallOption) (*SearchPOIsResponse, error)
	SearchPOIsSemantic(ctx context.Context, in *SearchPOIsSemanticRequest, opts ...grpc.CallOption) (*SearchPOIsSemanticResponse, error)
	SearchPOIsSemanticByCity(ctx context.Context, in *SearchPOIsSemanticByCityRequest, opts ...grpc.CallOption) (*SearchPOIsSemanticResponse, error)
	SearchPOIsHybrid(ctx context.Context, in *SearchPOIsHybridRequest, opts ...grpc.CallOption) (*SearchPOIsHybridResponse, error)
	// Get nearby recommendations
	GetNearbyRecommendations(ctx context.Context, in *GetNearbyRecommendationsRequest, opts ...grpc.CallOption) (*GetNearbyRecommendationsResponse, error)
	// Domain-specific discovery endpoints
	DiscoverRestaurants(ctx context.Context, in *DiscoverRestaurantsRequest, opts ...grpc.CallOption) (*DiscoverRestaurantsResponse, error)
	DiscoverActivities(ctx context.Context, in *DiscoverActivitiesRequest, opts ...grpc.CallOption) (*DiscoverActivitiesResponse, error)
	DiscoverHotels(ctx context.Context, in *DiscoverHotelsRequest, opts ...grpc.CallOption) (*DiscoverHotelsResponse, error)
	DiscoverAttractions(ctx context.Context, in *DiscoverAttractionsRequest, opts ...grpc.CallOption) (*DiscoverAttractionsResponse, error)
	// Favorites management
	AddToFavorites(ctx context.Context, in *AddToFavoritesRequest, opts ...grpc.CallOption) (*AddToFavoritesResponse, error)
	RemoveFromFavorites(ctx context.Context, in *RemoveFromFavoritesRequest, opts ...grpc.CallOption) (*RemoveFromFavoritesResponse, error)
	GetFavorites(ctx context.Context, in *GetFavoritesRequest, opts ...grpc.CallOption) (*GetFavoritesResponse, error)
	// Itinerary management
	GetItineraries(ctx context.Context, in *GetItinerariesRequest, opts ...grpc.CallOption) (*GetItinerariesResponse, error)
	GetItinerary(ctx context.Context, in *GetItineraryRequest, opts ...grpc.CallOption) (*GetItineraryResponse, error)
	UpdateItinerary(ctx context.Context, in *UpdateItineraryRequest, opts ...grpc.CallOption) (*UpdateItineraryResponse, error)
	// Generate embeddings for POIs (admin)
	GenerateEmbeddings(ctx context.Context, in *GenerateEmbeddingsRequest, opts ...grpc.CallOption) (*GenerateEmbeddingsResponse, error)
}

type pOIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPOIServiceClient(cc grpc.ClientConnInterface) POIServiceClient {
	return &pOIServiceClient{cc}
}

func (c *pOIServiceClient) GetPOIsByCity(ctx context.Context, in *GetPOIsByCityRequest, opts ...grpc.CallOption) (*GetPOIsByCityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPOIsByCityResponse)
	err := c.cc.Invoke(ctx, POIService_GetPOIsByCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOIServiceClient) SearchPOIs(ctx context.Context, in *SearchPOIsRequest, opts ...grpc.CallOption) (*SearchPOIsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchPOIsResponse)
	err := c.cc.Invoke(ctx, POIService_SearchPOIs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOIServiceClient) SearchPOIsSemantic(ctx context.Context, in *SearchPOIsSemanticRequest, opts ...grpc.CallOption) (*SearchPOIsSemanticResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchPOIsSemanticResponse)
	err := c.cc.Invoke(ctx, POIService_SearchPOIsSemantic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOIServiceClient) SearchPOIsSemanticByCity(ctx context.Context, in *SearchPOIsSemanticByCityRequest, opts ...grpc.CallOption) (*SearchPOIsSemanticResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchPOIsSemanticResponse)
	err := c.cc.Invoke(ctx, POIService_SearchPOIsSemanticByCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOIServiceClient) SearchPOIsHybrid(ctx context.Context, in *SearchPOIsHybridRequest, opts ...grpc.CallOption) (*SearchPOIsHybridResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchPOIsHybridResponse)
	err := c.cc.Invoke(ctx, POIService_SearchPOIsHybrid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOIServiceClient) GetNearbyRecommendations(ctx context.Context, in *GetNearbyRecommendationsRequest, opts ...grpc.CallOption) (*GetNearbyRecommendationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNearbyRecommendationsResponse)
	err := c.cc.Invoke(ctx, POIService_GetNearbyRecommendations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOIServiceClient) DiscoverRestaurants(ctx context.Context, in *DiscoverRestaurantsRequest, opts ...grpc.CallOption) (*DiscoverRestaurantsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiscoverRestaurantsResponse)
	err := c.cc.Invoke(ctx, POIService_DiscoverRestaurants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOIServiceClient) DiscoverActivities(ctx context.Context, in *DiscoverActivitiesRequest, opts ...grpc.CallOption) (*DiscoverActivitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiscoverActivitiesResponse)
	err := c.cc.Invoke(ctx, POIService_DiscoverActivities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOIServiceClient) DiscoverHotels(ctx context.Context, in *DiscoverHotelsRequest, opts ...grpc.CallOption) (*DiscoverHotelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiscoverHotelsResponse)
	err := c.cc.Invoke(ctx, POIService_DiscoverHotels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOIServiceClient) DiscoverAttractions(ctx context.Context, in *DiscoverAttractionsRequest, opts ...grpc.CallOption) (*DiscoverAttractionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiscoverAttractionsResponse)
	err := c.cc.Invoke(ctx, POIService_DiscoverAttractions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOIServiceClient) AddToFavorites(ctx context.Context, in *AddToFavoritesRequest, opts ...grpc.CallOption) (*AddToFavoritesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddToFavoritesResponse)
	err := c.cc.Invoke(ctx, POIService_AddToFavorites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOIServiceClient) RemoveFromFavorites(ctx context.Context, in *RemoveFromFavoritesRequest, opts ...grpc.CallOption) (*RemoveFromFavoritesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveFromFavoritesResponse)
	err := c.cc.Invoke(ctx, POIService_RemoveFromFavorites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOIServiceClient) GetFavorites(ctx context.Context, in *GetFavoritesRequest, opts ...grpc.CallOption) (*GetFavoritesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFavoritesResponse)
	err := c.cc.Invoke(ctx, POIService_GetFavorites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOIServiceClient) GetItineraries(ctx context.Context, in *GetItinerariesRequest, opts ...grpc.CallOption) (*GetItinerariesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetItinerariesResponse)
	err := c.cc.Invoke(ctx, POIService_GetItineraries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOIServiceClient) GetItinerary(ctx context.Context, in *GetItineraryRequest, opts ...grpc.CallOption) (*GetItineraryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetItineraryResponse)
	err := c.cc.Invoke(ctx, POIService_GetItinerary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOIServiceClient) UpdateItinerary(ctx context.Context, in *UpdateItineraryRequest, opts ...grpc.CallOption) (*UpdateItineraryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateItineraryResponse)
	err := c.cc.Invoke(ctx, POIService_UpdateItinerary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pOIServiceClient) GenerateEmbeddings(ctx context.Context, in *GenerateEmbeddingsRequest, opts ...grpc.CallOption) (*GenerateEmbeddingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateEmbeddingsResponse)
	err := c.cc.Invoke(ctx, POIService_GenerateEmbeddings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// POIServiceServer is the server API for POIService service.
// All implementations must embed UnimplementedPOIServiceServer
// for forward compatibility.
//
// POIService provides points of interest discovery and management
type POIServiceServer interface {
	// Get POIs by city
	GetPOIsByCity(context.Context, *GetPOIsByCityRequest) (*GetPOIsByCityResponse, error)
	SearchPOIs(context.Context, *SearchPOIsRequest) (*SearchPOIsResponse, error)
	SearchPOIsSemantic(context.Context, *SearchPOIsSemanticRequest) (*SearchPOIsSemanticResponse, error)
	SearchPOIsSemanticByCity(context.Context, *SearchPOIsSemanticByCityRequest) (*SearchPOIsSemanticResponse, error)
	SearchPOIsHybrid(context.Context, *SearchPOIsHybridRequest) (*SearchPOIsHybridResponse, error)
	// Get nearby recommendations
	GetNearbyRecommendations(context.Context, *GetNearbyRecommendationsRequest) (*GetNearbyRecommendationsResponse, error)
	// Domain-specific discovery endpoints
	DiscoverRestaurants(context.Context, *DiscoverRestaurantsRequest) (*DiscoverRestaurantsResponse, error)
	DiscoverActivities(context.Context, *DiscoverActivitiesRequest) (*DiscoverActivitiesResponse, error)
	DiscoverHotels(context.Context, *DiscoverHotelsRequest) (*DiscoverHotelsResponse, error)
	DiscoverAttractions(context.Context, *DiscoverAttractionsRequest) (*DiscoverAttractionsResponse, error)
	// Favorites management
	AddToFavorites(context.Context, *AddToFavoritesRequest) (*AddToFavoritesResponse, error)
	RemoveFromFavorites(context.Context, *RemoveFromFavoritesRequest) (*RemoveFromFavoritesResponse, error)
	GetFavorites(context.Context, *GetFavoritesRequest) (*GetFavoritesResponse, error)
	// Itinerary management
	GetItineraries(context.Context, *GetItinerariesRequest) (*GetItinerariesResponse, error)
	GetItinerary(context.Context, *GetItineraryRequest) (*GetItineraryResponse, error)
	UpdateItinerary(context.Context, *UpdateItineraryRequest) (*UpdateItineraryResponse, error)
	// Generate embeddings for POIs (admin)
	GenerateEmbeddings(context.Context, *GenerateEmbeddingsRequest) (*GenerateEmbeddingsResponse, error)
	mustEmbedUnimplementedPOIServiceServer()
}

// UnimplementedPOIServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPOIServiceServer struct{}

func (UnimplementedPOIServiceServer) GetPOIsByCity(context.Context, *GetPOIsByCityRequest) (*GetPOIsByCityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPOIsByCity not implemented")
}
func (UnimplementedPOIServiceServer) SearchPOIs(context.Context, *SearchPOIsRequest) (*SearchPOIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPOIs not implemented")
}
func (UnimplementedPOIServiceServer) SearchPOIsSemantic(context.Context, *SearchPOIsSemanticRequest) (*SearchPOIsSemanticResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPOIsSemantic not implemented")
}
func (UnimplementedPOIServiceServer) SearchPOIsSemanticByCity(context.Context, *SearchPOIsSemanticByCityRequest) (*SearchPOIsSemanticResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPOIsSemanticByCity not implemented")
}
func (UnimplementedPOIServiceServer) SearchPOIsHybrid(context.Context, *SearchPOIsHybridRequest) (*SearchPOIsHybridResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPOIsHybrid not implemented")
}
func (UnimplementedPOIServiceServer) GetNearbyRecommendations(context.Context, *GetNearbyRecommendationsRequest) (*GetNearbyRecommendationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNearbyRecommendations not implemented")
}
func (UnimplementedPOIServiceServer) DiscoverRestaurants(context.Context, *DiscoverRestaurantsRequest) (*DiscoverRestaurantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverRestaurants not implemented")
}
func (UnimplementedPOIServiceServer) DiscoverActivities(context.Context, *DiscoverActivitiesRequest) (*DiscoverActivitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverActivities not implemented")
}
func (UnimplementedPOIServiceServer) DiscoverHotels(context.Context, *DiscoverHotelsRequest) (*DiscoverHotelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverHotels not implemented")
}
func (UnimplementedPOIServiceServer) DiscoverAttractions(context.Context, *DiscoverAttractionsRequest) (*DiscoverAttractionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverAttractions not implemented")
}
func (UnimplementedPOIServiceServer) AddToFavorites(context.Context, *AddToFavoritesRequest) (*AddToFavoritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToFavorites not implemented")
}
func (UnimplementedPOIServiceServer) RemoveFromFavorites(context.Context, *RemoveFromFavoritesRequest) (*RemoveFromFavoritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromFavorites not implemented")
}
func (UnimplementedPOIServiceServer) GetFavorites(context.Context, *GetFavoritesRequest) (*GetFavoritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavorites not implemented")
}
func (UnimplementedPOIServiceServer) GetItineraries(context.Context, *GetItinerariesRequest) (*GetItinerariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItineraries not implemented")
}
func (UnimplementedPOIServiceServer) GetItinerary(context.Context, *GetItineraryRequest) (*GetItineraryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItinerary not implemented")
}
func (UnimplementedPOIServiceServer) UpdateItinerary(context.Context, *UpdateItineraryRequest) (*UpdateItineraryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItinerary not implemented")
}
func (UnimplementedPOIServiceServer) GenerateEmbeddings(context.Context, *GenerateEmbeddingsRequest) (*GenerateEmbeddingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateEmbeddings not implemented")
}
func (UnimplementedPOIServiceServer) mustEmbedUnimplementedPOIServiceServer() {}
func (UnimplementedPOIServiceServer) testEmbeddedByValue()                    {}

// UnsafePOIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to POIServiceServer will
// result in compilation errors.
type UnsafePOIServiceServer interface {
	mustEmbedUnimplementedPOIServiceServer()
}

func RegisterPOIServiceServer(s grpc.ServiceRegistrar, srv POIServiceServer) {
	// If the following call pancis, it indicates UnimplementedPOIServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&POIService_ServiceDesc, srv)
}

func _POIService_GetPOIsByCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPOIsByCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POIServiceServer).GetPOIsByCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POIService_GetPOIsByCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POIServiceServer).GetPOIsByCity(ctx, req.(*GetPOIsByCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POIService_SearchPOIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPOIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POIServiceServer).SearchPOIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POIService_SearchPOIs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POIServiceServer).SearchPOIs(ctx, req.(*SearchPOIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POIService_SearchPOIsSemantic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPOIsSemanticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POIServiceServer).SearchPOIsSemantic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POIService_SearchPOIsSemantic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POIServiceServer).SearchPOIsSemantic(ctx, req.(*SearchPOIsSemanticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POIService_SearchPOIsSemanticByCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPOIsSemanticByCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POIServiceServer).SearchPOIsSemanticByCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POIService_SearchPOIsSemanticByCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POIServiceServer).SearchPOIsSemanticByCity(ctx, req.(*SearchPOIsSemanticByCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POIService_SearchPOIsHybrid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPOIsHybridRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POIServiceServer).SearchPOIsHybrid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POIService_SearchPOIsHybrid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POIServiceServer).SearchPOIsHybrid(ctx, req.(*SearchPOIsHybridRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POIService_GetNearbyRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNearbyRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POIServiceServer).GetNearbyRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POIService_GetNearbyRecommendations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POIServiceServer).GetNearbyRecommendations(ctx, req.(*GetNearbyRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POIService_DiscoverRestaurants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverRestaurantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POIServiceServer).DiscoverRestaurants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POIService_DiscoverRestaurants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POIServiceServer).DiscoverRestaurants(ctx, req.(*DiscoverRestaurantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POIService_DiscoverActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverActivitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POIServiceServer).DiscoverActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POIService_DiscoverActivities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POIServiceServer).DiscoverActivities(ctx, req.(*DiscoverActivitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POIService_DiscoverHotels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverHotelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POIServiceServer).DiscoverHotels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POIService_DiscoverHotels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POIServiceServer).DiscoverHotels(ctx, req.(*DiscoverHotelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POIService_DiscoverAttractions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverAttractionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POIServiceServer).DiscoverAttractions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POIService_DiscoverAttractions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POIServiceServer).DiscoverAttractions(ctx, req.(*DiscoverAttractionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POIService_AddToFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToFavoritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POIServiceServer).AddToFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POIService_AddToFavorites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POIServiceServer).AddToFavorites(ctx, req.(*AddToFavoritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POIService_RemoveFromFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromFavoritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POIServiceServer).RemoveFromFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POIService_RemoveFromFavorites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POIServiceServer).RemoveFromFavorites(ctx, req.(*RemoveFromFavoritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POIService_GetFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFavoritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POIServiceServer).GetFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POIService_GetFavorites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POIServiceServer).GetFavorites(ctx, req.(*GetFavoritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POIService_GetItineraries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItinerariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POIServiceServer).GetItineraries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POIService_GetItineraries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POIServiceServer).GetItineraries(ctx, req.(*GetItinerariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POIService_GetItinerary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItineraryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POIServiceServer).GetItinerary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POIService_GetItinerary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POIServiceServer).GetItinerary(ctx, req.(*GetItineraryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POIService_UpdateItinerary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItineraryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POIServiceServer).UpdateItinerary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POIService_UpdateItinerary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POIServiceServer).UpdateItinerary(ctx, req.(*UpdateItineraryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _POIService_GenerateEmbeddings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateEmbeddingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(POIServiceServer).GenerateEmbeddings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: POIService_GenerateEmbeddings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(POIServiceServer).GenerateEmbeddings(ctx, req.(*GenerateEmbeddingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// POIService_ServiceDesc is the grpc.ServiceDesc for POIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var POIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai_poi.poi.v1.POIService",
	HandlerType: (*POIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPOIsByCity",
			Handler:    _POIService_GetPOIsByCity_Handler,
		},
		{
			MethodName: "SearchPOIs",
			Handler:    _POIService_SearchPOIs_Handler,
		},
		{
			MethodName: "SearchPOIsSemantic",
			Handler:    _POIService_SearchPOIsSemantic_Handler,
		},
		{
			MethodName: "SearchPOIsSemanticByCity",
			Handler:    _POIService_SearchPOIsSemanticByCity_Handler,
		},
		{
			MethodName: "SearchPOIsHybrid",
			Handler:    _POIService_SearchPOIsHybrid_Handler,
		},
		{
			MethodName: "GetNearbyRecommendations",
			Handler:    _POIService_GetNearbyRecommendations_Handler,
		},
		{
			MethodName: "DiscoverRestaurants",
			Handler:    _POIService_DiscoverRestaurants_Handler,
		},
		{
			MethodName: "DiscoverActivities",
			Handler:    _POIService_DiscoverActivities_Handler,
		},
		{
			MethodName: "DiscoverHotels",
			Handler:    _POIService_DiscoverHotels_Handler,
		},
		{
			MethodName: "DiscoverAttractions",
			Handler:    _POIService_DiscoverAttractions_Handler,
		},
		{
			MethodName: "AddToFavorites",
			Handler:    _POIService_AddToFavorites_Handler,
		},
		{
			MethodName: "RemoveFromFavorites",
			Handler:    _POIService_RemoveFromFavorites_Handler,
		},
		{
			MethodName: "GetFavorites",
			Handler:    _POIService_GetFavorites_Handler,
		},
		{
			MethodName: "GetItineraries",
			Handler:    _POIService_GetItineraries_Handler,
		},
		{
			MethodName: "GetItinerary",
			Handler:    _POIService_GetItinerary_Handler,
		},
		{
			MethodName: "UpdateItinerary",
			Handler:    _POIService_UpdateItinerary_Handler,
		},
		{
			MethodName: "GenerateEmbeddings",
			Handler:    _POIService_GenerateEmbeddings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "poi.proto",
}
